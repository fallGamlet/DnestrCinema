plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.kapt)
    alias(libs.plugins.kotlin.serialization)
    alias(libs.plugins.kotlin.compose)
    alias(libs.plugins.google.services)
    alias(libs.plugins.google.firebase.crashlytics)
}

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    signingConfigs {
        config {
            keyAlias keystoreProperties["keyAlias"]
            keyPassword keystoreProperties["keyPassword"]
            storeFile file(keystoreProperties["storeFile"])
            storePassword keystoreProperties["storePassword"]
        }
    }

    configurations.configureEach {
        resolutionStrategy.force("com.google.code.findbugs:jsr305:3.0.2")
    }

    compileSdk 35
    buildToolsVersion = "36.0.0"
    namespace "com.fallgamlet.dnestrcinema"

    defaultConfig {
        applicationId "com.fallgamlet.dnestrcinema"
        minSdkVersion 21
        targetSdkVersion 36
        versionCode 35
        versionName "1.0.${versionCode}"
        project.ext.set("archivesBaseName", "DnestrCinema" + versionName)
        vectorDrawables.useSupportLibrary = true
        signingConfig signingConfigs.config
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.config
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.config
        }
    }
    buildFeatures {
        buildConfig true
        compose true
    }
    productFlavors {
    }
    compileOptions {
        incremental true
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11.toString()
    }
    composeCompiler {
        reportsDestination = layout.buildDirectory.dir("compose_compiler")
        stabilityConfigurationFile = rootProject.layout.projectDirectory.file("stability_config.conf")
    }
}

dependencies {
    implementation(fileTree(include: ["*.jar"], dir: "libs"))

    implementation(project(":KinotirApi"))

    implementation(libs.kotlin.stdlib)
    implementation(libs.kotlinx.serialization.json)

    implementation(platform(libs.androidx.compose.bom))
    androidTestImplementation(platform(libs.androidx.compose.bom))

    implementation(libs.androidx.material3)
    // Android Studio Preview support
    implementation(libs.androidx.ui.tooling.preview)
    debugImplementation(libs.androidx.ui.tooling)
    // UI Tests
    androidTestImplementation(libs.androidx.ui.test.junit4)
    debugImplementation(libs.androidx.ui.test.manifest)

    implementation(libs.androidx.navigation.compose)

    implementation(libs.coil.compose)
    implementation(libs.coil.network.okhttp)

    implementation(libs.androidx.annotation)
    implementation(libs.androidx.appcompat)
    implementation(libs.material)
    implementation(libs.androidx.multidex)
    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.fragment.ktx)

    implementation(libs.androidx.lifecycle.extensions)
    implementation(libs.androidx.lifecycle.common.java8)
    runtimeOnly (libs.androidx.lifecycle.runtime.ktx)

    implementation(libs.dagger)
    kapt (libs.dagger.compiler)
    kapt (libs.dagger.android.processor)

    implementation(libs.gson)

    implementation(libs.threetenabp)

    implementation(platform(libs.firebase.bom))
    implementation(libs.firebase.analytics.ktx)
    implementation(libs.firebase.crashlytics.ktx)

    debugImplementation(libs.leakcanary.support.fragment)
    debugImplementation(libs.leakcanary.android)
    releaseImplementation(libs.leakcanary.android.no.op)

    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.espresso.core)
}
